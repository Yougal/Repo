package com.yougal.stack;

/**
 * 
 * Given a string consisting of opening and closing parenthesis, find length of the longest valid parenthesis substring.
 * Examples:
 * 			Input : ((()
 * 			Output : 2
 * 			Explanation : ()
 * 
 * 			Input: )()())
 * 			Output : 4
 * 			Explanation: ()()
 * 
 * 			Input:  ()(()))))
 * 			Output: 6
 * 			Explanation:  ()(())
 * 
 * 			Input:
 * 				First line contains the test cases T.  1<=T<=500
 * 				Each test case have one line string S of character'(' and ')' of length  N.  1<=N<=10000
 * 			Example:
 * 			Input:
 * 				2
 * 				((()
 * 				)()())
 * 			Output:
 * 				2
 * 				4
 * For More Examples Use Expected Output <br/><br/>
 * <a href="http://www.practice.geeksforgeeks.org/problem-page.php?pid=1247">Problem Link</a>
 * 
 * 
 * @author yougal.bisht
 *
 */
public class LongestValidParanthesis {
	
	public static void main(String[] args) {
		/**Scanner sc = new Scanner(System.in);
		int numberOfInput  = Integer.valueOf(sc.nextLine());
		String patterns[] = new String[numberOfInput];
		for (int i=0;i<numberOfInput;i++) {
			String pattern = sc.nextLine();
			patterns[i] = pattern;
		}**/
		
		String patterns[]  = new String[]{"))))()))()))))(())())())())))))))()(()(()(()()(((((()((()())())(())()()))()"
				+ "()()()()((()())()((()()((((()(((()))(()))()((()()(())()()()))()())((((())(()))()()()((())))(())())))(())(()((()()"
				+ "((())()))()))(())((((())())()((())())(()(()()(())))()))())))(((())())))(())))())())(()(()()((()()(())((((((()))())"
				+ "(())()((())(()))))(()()())())))(()()))((())))(((())(((()())()())(())))(())()()()()))(())(()))))())())(()()()())))))"
				+ "((()())())(()(()))()()((()(())()()))))())))()(()(())()()))()))))())()))())))(()))()(((((()()()))))(()()(()()()))()()("
				+ "(((()())()(()))()(())(())(()(()))((())(())))))))(())))))()()(())))()))()(((()()())()))())))(((((()((()()()(((((()))))())(())"
				+ ")((()))()((())(())())()()((()(()()(()()))(()())()((())))((((()()))()(()()()())()()(()(((())))())(())))))()(()))((()(((()(()(()("
				+ ")((((((()())(()))()()()))))(())((()))(())))(()(()()))(()((())((())))((()((())(())))(((()(()()()(()(())(())))(())()())))(()))))((())("
				+ "(()())(()(((())(()))())((()))((()()))()))((()((()((()))(()((()))())(()(()(()))()()(()()))(((()(())))))()())()()))(()())(())())))))))"
				+ "))(()((((((())(()))))(()(()(((()()(()))((()))(()())(((()))()()))(((()))(()(((()(())))))))()(()()))())(()(((()()())())()))(((())(((((((("
				+ "))(())(()))))(((()))(()()))(((((()(()))())((()))))()((((((()())))())()()((()((()())((()()((((()()))))()()()))()(()))(((()(())((((((((((()("
				+ "())(((()()(()()(())((()))((((())())((((())))()(()()))))))))(()(((())((((((()()()(()())())(()))(()((()()()(()(())))())))()(()))()()(((()))()())("
				+ "())()))()())()((()))(()(()())(((((())(()))()))()))))(((((((()(()))))((((()())()(()()()()(()))())()()()(()(())(((()((((()"
				+ ")()))))()(()(((())))((()))(((((())(()))(()((())())(())())(()))())(((())))(((())()())(()()(())(()))(()(())((((()()))())()))()()"
				+ ")()))(()()((()))(()()))(())))())())(()(()))())()()())((((((((())))(()())()))(())(())()()(()))))))))(()()(())())))()(()()(((((())()()"
				+ "))(()((())()()())))()()(()()))((())(())()(((()(((()((())())))((((()(())()))()((((()))())())()((()()))(()()((()())()))))(()((()))(()()(("
				+ "((()(((((())())((())))()())()))(((()(()))))()()))))))(()(((((()(()()(()((()))())())))()(((())(((((()))()())(()())())()))(())))()(()(()())(((("
				+ ")()()))))))(())(())))(()(()))())())())(((())()(()((()((()))(()())(())((())()))((())(((()((((()(()(())(()())()()()))()((()))(())(()((()()))()()(()("
				+ "()())(()())(((())))))))))()(()))(()(((()()()(())()))))))()())))((()))))))))(((()(())())())(()))((()(()(()))(()))())((()((()((()))))((()(()())(()((())()("
				+ "))))(()(())))))((()()((()))(())))())))((())()))(()((()))()())()())()()))))(()()()()())((()(()))))((()(()()(())))()(()()(()(()())(()()((()())())))()))))))(())((()())))()"
				+ "(())())())))())(())(((())())()()(()()())())))()(()()())(((((()()))()()))))(((())((()(((()))((()(((()((()()((((()())))(()(())()()()((()(()))("
				+ "((())(())))()))()(()))(())))))(())))(()(()(((()())())))())()(()(()(((())(()))))()((()()))((()())((())()(())(())(())(())()()))))(((((((())(((()"
				+ ")))()(()(((()()))()((())()()()))))())))()())))))))((()()))())()))(()(((((((()))))(()())))())())(((()()))((((((()())))))))))()()()()(()()(()()((()"
				+ "())()(((()())(((())()()(((())()((((()))(())(((()(((()()(())(()()()(())(()((())((()()((()(()))()(()(())()()(()))()((((())))()(())((((()()))())())("
				+ "()))))()(((((())))((((())))))((((()((((())))())())))()))))))((())((()))())(((((((((((((()((()()))((()))))()()(()))()))()(((()(()()(()((()()()((("
				+ "))())))((()((())((()()(()())((((()(((()))))(()((()()())(()())(((()()((())((((())((()(((((((()(((())((((())((((((()()(((()()))((((()()()))((((())"
				+ "())(())(()(()))()()))(())))(()(()))()))()())))))()))(())))(((()(()(()()(()(()(())()(()(((()))(((()))))(()))))())))(((()))()))((()(()()(((((())()"
				+ ")))(()((((((()((()()()()((((()(()(()))(()(((())()(((((()))(()))()(()))()()(()()()()())()))(())))(()(()(()))(())(())))()(())))))(((()()(((())())(()(("
				+ ")()(()(())((())))(((()))))(())())()()(()()))))))()))))()))))(((()()))(()(()((())()(())())()()()()((())()((())(((())())()()))()()()()()))((()()())))"
				+ "))()(()((()()())))))()(((((((((((()))))(()))())()())((()()()(())))())())())(())(()())()(()((((((()()(()()))())))())((())((()((()())())))))(()((((())"
				+ "))(())((()((())())(())))(()())((())(())))((((())(((((()()))))((()))())())()())()))(((()(())))(()()(())))())))()))()(()()(()())()))())(()(())))))()))"
				+ "((())(()())())))(()())())(())()()(()())))())()))((((()()))))()(())(())()(())()))()(()(()(()((()(())())(((((()((((()))()()()))(()()(()()()())))))())"
				+ "())))(()))))()())))((()(()((()()))))((((((()(()(()))())()()(()(()))((((())((())())()((((((()())())()()(())))))(())(())((()(()()(((()()())()((())((("
				+ "(()))))((())((((((((()()))))(((())(()()(()()))((())(((((()()()())((()()())())(()((()))(())()(()()()))())(()()(()))))()(()((()(())()())(())()()))(("
				+ "))()(((((())(((()))(()())(((())()((()))(((())())()())(()))(()())))(())))())(()()))))((((())()(()((((()()))(())(()(()()()())(((())(((((((())()()())(("
				+ ")))()))(()()((())((((()))(()())())(()()(()()(()()()())()()())()((()()))))))((()()))(()()))(((())))())))()()()())()())(((())(()(()(()()((())(()())((("
				+ ")))()))())))(())()())((((((())))))()))())()(((()()((()))(((())())(((()(()))(((()()()(()))())((()))(())))))((((()()))()())()()(((()))(()(()((()()()()"
				+ "))))(()()()))()()))()()()))()(()()()(((())()(((())))(()(())(()())))((())()))()(()))(()())(((()(((()))())(())())()))()(()()())))(())(()()()())(()()(("
				+ "()()))())()(())())()))))())))(((())()(())(((()))))))))))))))()))))((()(()()((((((((()(()()())())((()(((()((()))()(())))()(())((())((()(())))))))(()"
				+ "((()))()()()))))()(()(((()()())((((()()(((()(()()()))(((()(())))(((()())()))()(((()((())))())()(()((((()((((()))))(())())()))(((()()))(()))()())(((("
				+ "(((())()(())(()(((((((())())))()((((((())()())()))((()()())))()()()()(()(()()(()((()(()(()(()()))))(((()(()()((())))()()()(((((((()(()()((()()(()(("
				+ "))))()))((((((())(()(((()()(()(()()())((()))())(()()()((())()())()(()))))())((()((()()(()())()))((((((())))((()))())((())()(((())))))())()))()))()"
				+ "))(()))((()())())(())())())))())()())((()())()))())(((()(()()(()())((()()()(()())))((())()((()())(("
				+ "())))()))(()(()())()((()(()(((())(())())))))((()()))()))())()(())))))())()))(())(()(((()(((()(("};
		//patterns  = new String[]{"))))((((()()()(((()))))((("};
		getLongestValidParanthese(patterns);
		System.out.println(longestValidParentheses("()()"));
		//sc.close();
	}

	private static void getLongestValidParanthese(String[] patterns) {
		for (String pattern : patterns) {
			System.out.println(longestValidParentheses(pattern));
		}
	}
	
	static int longestValidParentheses(String s) {
        int n = s.length();
        int len = 0;
        int tmp = 0;

        Stack<Integer> stk = new Stack<Integer>(s.length());
        for (int i = 0; i < n; ++i) {
            if ('(' == s.charAt(i))
                stk.push(i);
            else {
                if (!stk.isEmpty() && '(' == s.charAt(stk.peek())) {
                    stk.pop();
                    tmp = i - (stk.isEmpty() ? -1 : stk.peek());
                    len =  Math.max(len, tmp);
                }
                else {
                    stk.push(i);
                }
            }
        }
        return len;
    }
}
